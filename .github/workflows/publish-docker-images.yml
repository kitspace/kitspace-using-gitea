name: Publish Docker Images

on: [push]
jobs:
  build:
    name: Build docker images
    runs-on: ubuntu-20.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Push frontend to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ghcr.io/kitspace/frontend:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Push processor to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./processor
          file: ./processor/Dockerfile
          push: true
          tags: ghcr.io/kitspace/processor:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Pull gitea image with current submodule SHA
        shell: bash
        run: docker pull ghcr.io/kitspace/gitea:${{ steps.sha.outputs.gitea_sha_short }}
        continue-on-error: true

      - name: Push gitea to GitHub Container Registry
        # If the previous step failed, i.e., there's no image tagged
        # gitea:${{gitea_sha_short}} in ghcr, build image and push it
        if: ${{ failure() }}
        uses: docker/build-push-action@v2
        with:
          context: ./gitea
          file: ./gitea/Dockerfile
          push: true
          tags: ghcr.io/kitspace/gitea:${{ steps.sha.outputs.gitea_sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  test:
    name: Run e2e tests
    runs-on: ubuntu-20.04
    needs:
      - build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set environment variables
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.example

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Configure /etc/hosts
        shell: bash
        run: cat ./config/hosts | sudo tee -a /etc/hosts

      - name: Install Gitea
        shell: bash
        timeout-minutes: 5
        env:
          FRONTEND_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
          PROCESSOR_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
          GITEA_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.gitea_sha_short }}
        run: |
          scripts/install_gitea.sh

      - name: pre e2e
        shell: bash
        run: scripts/pre_e2e.sh

      - name: e2e
        uses: cypress-io/github-action@v2
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FRONTEND_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
          PROCESSOR_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
          GITEA_DEPLOY_IMAGE_TAG: ${{ steps.sha.outputs.gitea_sha_short }}
        with:
          start: docker-compose -f ../docker-compose.yml -f ../docker-compose.deploy.yml up
          browser: chrome
          command: yarn e2e --record
          working-directory: frontend
          # wait for 2 minutes for the server to respond
          wait-on: 'http://kitspace.test:3000'
          # This value is in seconds
          wait-on-timeout: 120

  publish:
    name: Tag images with "latest"
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    needs:
      - test

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Tag frontend:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/frontend/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/frontend/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag processor:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/processor/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/processor/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag gitea:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/gitea/manifests/${{ steps.sha.outputs.gitea_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/gitea/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.CR_PAT }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json
